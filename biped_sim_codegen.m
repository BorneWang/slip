% BIPED_SIM_CODEGEN   Generate static library ControllerParams from biped_sim,
%  ControllerParams, ControllerState, RobotParams, RobotState.
% 
% Script generated from project 'biped_sim.prj' on 19-Nov-2016.
% 
% See also CODER, CODER.CONFIG, CODER.TYPEOF, CODEGEN.

%% Create configuration object of class 'coder.EmbeddedCodeConfig'.
cfg = coder.config('lib','ecoder',true);
cfg.CommentStyle = 'Single-line';
cfg.IndentSize = 4;
cfg.IncludeTerminateFcn = false;
cfg.MATLABFcnDesc = false;
cfg.ConvertIfToSwitch = true;
cfg.GenerateCodeMetricsReport = true;
cfg.GenerateCodeReplacementReport = true;
cfg.HighlightPotentialDataTypeIssues = true;
cfg.EnableStrengthReduction = true;
cfg.GenerateReport = true;
cfg.EnableVariableSizing = false;
cfg.SaturateOnIntegerOverflow = false;
cfg.EnableAutoExtrinsicCalls = false;
cfg.FilePartitionMethod = 'SingleFile';
cfg.InlineThreshold = 1000000;
cfg.InlineThresholdMax = 1000000;
cfg.InlineStackLimit = 1000000;
% cfg.EnableMemcpy = false;
% cfg.InitFltsAndDblsToZero = false;
cfg.PreserveVariableNames = 'All';
cfg.EnableOpenMP = false;
cfg.GenCodeOnly = true;
cfg.BuildConfiguration = 'Faster Runs';
cfg.TargetLangStandard = 'C99 (ISO)';
cfg.CodeReplacementLibrary = 'GNU C99 extensions';
cfg.SupportNonFinite = false;

%% Define argument types for entry-point 'biped_sim'.
ARGS = cell(6,1);
ARGS{1} = cell(7,1);
ARGS{1}{1} = struct;
ARGS{1}{1}.body = struct;
ARGS{1}{1}.body.x = coder.typeof(0);
ARGS{1}{1}.body.y = coder.typeof(0);
ARGS{1}{1}.body.theta = coder.typeof(0);
ARGS{1}{1}.body.dx = coder.typeof(0);
ARGS{1}{1}.body.dy = coder.typeof(0);
ARGS{1}{1}.body.dtheta = coder.typeof(0);
ARGS{1}{1}.body = coder.typeof(ARGS{1}{1}.body);
ARGS{1}{1}.body = coder.cstructname(ARGS{1}{1}.body,'body_state_t');
ARGS{1}{1}.right = struct;
ARGS{1}{1}.right.l = coder.typeof(0);
ARGS{1}{1}.right.l_eq = coder.typeof(0);
ARGS{1}{1}.right.theta = coder.typeof(0);
ARGS{1}{1}.right.theta_eq = coder.typeof(0);
ARGS{1}{1}.right.dl = coder.typeof(0);
ARGS{1}{1}.right.dl_eq = coder.typeof(0);
ARGS{1}{1}.right.dtheta = coder.typeof(0);
ARGS{1}{1}.right.dtheta_eq = coder.typeof(0);
ARGS{1}{1}.right = coder.typeof(ARGS{1}{1}.right);
ARGS{1}{1}.right = coder.cstructname(ARGS{1}{1}.right,'leg_state_t');
ARGS{1}{1}.left = struct;
ARGS{1}{1}.left.l = coder.typeof(0);
ARGS{1}{1}.left.l_eq = coder.typeof(0);
ARGS{1}{1}.left.theta = coder.typeof(0);
ARGS{1}{1}.left.theta_eq = coder.typeof(0);
ARGS{1}{1}.left.dl = coder.typeof(0);
ARGS{1}{1}.left.dl_eq = coder.typeof(0);
ARGS{1}{1}.left.dtheta = coder.typeof(0);
ARGS{1}{1}.left.dtheta_eq = coder.typeof(0);
ARGS{1}{1}.left = coder.typeof(ARGS{1}{1}.left);
ARGS{1}{1}.left = coder.cstructname(ARGS{1}{1}.left,'leg_state_t');
ARGS{1}{1} = coder.typeof(ARGS{1}{1});
ARGS{1}{1} = coder.cstructname(ARGS{1}{1},'robot_state_t');
ARGS{1}{2} = struct;
ARGS{1}{2}.phase = struct;
ARGS{1}{2}.phase.right = coder.typeof(0);
ARGS{1}{2}.phase.left = coder.typeof(0);
ARGS{1}{2}.phase = coder.typeof(ARGS{1}{2}.phase);
ARGS{1}{2}.phase = coder.cstructname(ARGS{1}{2}.phase,'rl_t');
ARGS{1}{2}.foot_x_last = struct;
ARGS{1}{2}.foot_x_last.right = coder.typeof(0);
ARGS{1}{2}.foot_x_last.left = coder.typeof(0);
ARGS{1}{2}.foot_x_last = coder.typeof(ARGS{1}{2}.foot_x_last);
ARGS{1}{2}.foot_x_last = coder.cstructname(ARGS{1}{2}.foot_x_last,'rl_t');
ARGS{1}{2}.foot_x_target = struct;
ARGS{1}{2}.foot_x_target.right = coder.typeof(0);
ARGS{1}{2}.foot_x_target.left = coder.typeof(0);
ARGS{1}{2}.foot_x_target = coder.typeof(ARGS{1}{2}.foot_x_target);
ARGS{1}{2}.foot_x_target = coder.cstructname(ARGS{1}{2}.foot_x_target,'rl_t');
ARGS{1}{2}.body_ddx = coder.typeof(0);
ARGS{1}{2}.body_dx_last = coder.typeof(0);
ARGS{1}{2} = coder.typeof(ARGS{1}{2});
ARGS{1}{2} = coder.cstructname(ARGS{1}{2},'controller_state_t');
ARGS{1}{3} = struct;
ARGS{1}{3}.gravity = coder.typeof(0);
ARGS{1}{3}.body = struct;
ARGS{1}{3}.body.mass = coder.typeof(0);
ARGS{1}{3}.body.inertia = coder.typeof(0);
ARGS{1}{3}.body = coder.typeof(ARGS{1}{3}.body);
ARGS{1}{3}.body = coder.cstructname(ARGS{1}{3}.body,'body_params_t');
ARGS{1}{3}.foot = struct;
ARGS{1}{3}.foot.mass = coder.typeof(0);
ARGS{1}{3}.foot = coder.typeof(ARGS{1}{3}.foot);
ARGS{1}{3}.foot = coder.cstructname(ARGS{1}{3}.foot,'foot_params_t');
ARGS{1}{3}.length = struct;
ARGS{1}{3}.length.stiffness = coder.typeof(0);
ARGS{1}{3}.length.damping = coder.typeof(0);
ARGS{1}{3}.length.motor = struct;
ARGS{1}{3}.length.motor.inertia = coder.typeof(0);
ARGS{1}{3}.length.motor.damping = coder.typeof(0);
ARGS{1}{3}.length.motor.ratio = coder.typeof(0);
ARGS{1}{3}.length.motor.torque = coder.typeof(0);
ARGS{1}{3}.length.motor = coder.typeof(ARGS{1}{3}.length.motor);
ARGS{1}{3}.length.motor = coder.cstructname(ARGS{1}{3}.length.motor,'motor_params_t');
ARGS{1}{3}.length.hardstop = struct;
ARGS{1}{3}.length.hardstop.min = coder.typeof(0);
ARGS{1}{3}.length.hardstop.max = coder.typeof(0);
ARGS{1}{3}.length.hardstop.kp = coder.typeof(0);
ARGS{1}{3}.length.hardstop.kd = coder.typeof(0);
ARGS{1}{3}.length.hardstop.dfade = coder.typeof(0);
ARGS{1}{3}.length.hardstop.fmax = coder.typeof(0);
ARGS{1}{3}.length.hardstop = coder.typeof(ARGS{1}{3}.length.hardstop);
ARGS{1}{3}.length.hardstop = coder.cstructname(ARGS{1}{3}.length.hardstop,'hardstop_params_t');
ARGS{1}{3}.length = coder.typeof(ARGS{1}{3}.length);
ARGS{1}{3}.length = coder.cstructname(ARGS{1}{3}.length,'dof_params_t');
ARGS{1}{3}.angle = struct;
ARGS{1}{3}.angle.stiffness = coder.typeof(0);
ARGS{1}{3}.angle.damping = coder.typeof(0);
ARGS{1}{3}.angle.motor = struct;
ARGS{1}{3}.angle.motor.inertia = coder.typeof(0);
ARGS{1}{3}.angle.motor.damping = coder.typeof(0);
ARGS{1}{3}.angle.motor.ratio = coder.typeof(0);
ARGS{1}{3}.angle.motor.torque = coder.typeof(0);
ARGS{1}{3}.angle.motor = coder.typeof(ARGS{1}{3}.angle.motor);
ARGS{1}{3}.angle.motor = coder.cstructname(ARGS{1}{3}.angle.motor,'motor_params_t');
ARGS{1}{3}.angle.hardstop = struct;
ARGS{1}{3}.angle.hardstop.min = coder.typeof(0);
ARGS{1}{3}.angle.hardstop.max = coder.typeof(0);
ARGS{1}{3}.angle.hardstop.kp = coder.typeof(0);
ARGS{1}{3}.angle.hardstop.kd = coder.typeof(0);
ARGS{1}{3}.angle.hardstop.dfade = coder.typeof(0);
ARGS{1}{3}.angle.hardstop.fmax = coder.typeof(0);
ARGS{1}{3}.angle.hardstop = coder.typeof(ARGS{1}{3}.angle.hardstop);
ARGS{1}{3}.angle.hardstop = coder.cstructname(ARGS{1}{3}.angle.hardstop,'hardstop_params_t');
ARGS{1}{3}.angle = coder.typeof(ARGS{1}{3}.angle);
ARGS{1}{3}.angle = coder.cstructname(ARGS{1}{3}.angle,'dof_params_t');
ARGS{1}{3}.ground = struct;
ARGS{1}{3}.ground.damping_depth = coder.typeof(0);
ARGS{1}{3}.ground.slip_ramp = coder.typeof(0);
ARGS{1}{3}.ground = coder.typeof(ARGS{1}{3}.ground);
ARGS{1}{3}.ground = coder.cstructname(ARGS{1}{3}.ground,'ground_params_t');
ARGS{1}{3} = coder.typeof(ARGS{1}{3});
ARGS{1}{3} = coder.cstructname(ARGS{1}{3},'robot_params_t');
ARGS{1}{4} = struct;
ARGS{1}{4}.phase_rate = coder.typeof(0);
ARGS{1}{4}.robot_weight = coder.typeof(0);
ARGS{1}{4}.contact_threshold = coder.typeof(0);
ARGS{1}{4}.l_max = coder.typeof(0);
ARGS{1}{4}.step_height = coder.typeof(0);
ARGS{1}{4}.ddx_filter = coder.typeof(0);
ARGS{1}{4}.step_lock_phase = coder.typeof(0);
ARGS{1}{4}.max_stride = coder.typeof(0);
ARGS{1}{4}.target_dx = coder.typeof(0);
ARGS{1}{4}.step_offset = coder.typeof(0);
ARGS{1}{4}.energy_injection = coder.typeof(0);
ARGS{1}{4}.x_pd = struct;
ARGS{1}{4}.x_pd.phase = coder.typeof(0);
ARGS{1}{4}.x_pd.target = coder.typeof(0);
ARGS{1}{4}.x_pd.kp = coder.typeof(0);
ARGS{1}{4}.x_pd.kd = coder.typeof(0);
ARGS{1}{4}.x_pd = coder.typeof(ARGS{1}{4}.x_pd,[1 11]);
ARGS{1}{4}.x_pd = coder.cstructname(ARGS{1}{4}.x_pd,'pd_t');
ARGS{1}{4}.y_pd = struct;
ARGS{1}{4}.y_pd.phase = coder.typeof(0);
ARGS{1}{4}.y_pd.target = coder.typeof(0);
ARGS{1}{4}.y_pd.kp = coder.typeof(0);
ARGS{1}{4}.y_pd.kd = coder.typeof(0);
ARGS{1}{4}.y_pd = coder.typeof(ARGS{1}{4}.y_pd,[1 11]);
ARGS{1}{4}.y_pd = coder.cstructname(ARGS{1}{4}.y_pd,'pd_t');
ARGS{1}{4}.weight_ff = struct;
ARGS{1}{4}.weight_ff.phase = coder.typeof(0);
ARGS{1}{4}.weight_ff.value = coder.typeof(0);
ARGS{1}{4}.weight_ff = coder.typeof(ARGS{1}{4}.weight_ff,[1 11]);
ARGS{1}{4}.weight_ff = coder.cstructname(ARGS{1}{4}.weight_ff,'trajectory_t');
ARGS{1}{4}.energy_ff = struct;
ARGS{1}{4}.energy_ff.phase = coder.typeof(0);
ARGS{1}{4}.energy_ff.value = coder.typeof(0);
ARGS{1}{4}.energy_ff = coder.typeof(ARGS{1}{4}.energy_ff,[1 11]);
ARGS{1}{4}.energy_ff = coder.cstructname(ARGS{1}{4}.energy_ff,'trajectory_t');
ARGS{1}{4}.body_angle_pd = struct;
ARGS{1}{4}.body_angle_pd.phase = coder.typeof(0);
ARGS{1}{4}.body_angle_pd.target = coder.typeof(0);
ARGS{1}{4}.body_angle_pd.kp = coder.typeof(0);
ARGS{1}{4}.body_angle_pd.kd = coder.typeof(0);
ARGS{1}{4}.body_angle_pd = coder.typeof(ARGS{1}{4}.body_angle_pd,[1 11]);
ARGS{1}{4}.body_angle_pd = coder.cstructname(ARGS{1}{4}.body_angle_pd,'pd_t');
ARGS{1}{4} = coder.typeof(ARGS{1}{4});
ARGS{1}{4} = coder.cstructname(ARGS{1}{4},'controller_params_t');
ARGS{1}{5} = struct;
ARGS{1}{5}.xstart = coder.typeof(0);
ARGS{1}{5}.xend = coder.typeof(0);
ARGS{1}{5}.height = coder.typeof(0,[101  1]);
ARGS{1}{5}.stiffness = coder.typeof(0);
ARGS{1}{5}.damping = coder.typeof(0);
ARGS{1}{5}.friction = coder.typeof(0);
ARGS{1}{5} = coder.typeof(ARGS{1}{5});
ARGS{1}{5} = coder.cstructname(ARGS{1}{5},'terrain_t');
ARGS{1}{6} = coder.typeof(0);
ARGS{1}{7} = coder.typeof(0);

%% Invoke MATLAB Coder.
codegen -config cfg -o biped_sim biped_sim -args ARGS{1} ControllerParams ControllerState RobotParams RobotState Terrain
