%% Full bislip EOMs with motor inertia, damping
syms ddbx ddby ddthb ddleqa ddla ddthoa ddleqb ddlb ddthob Tint1a Tint2a Tint1b Tint2b real
syms Fla Tma Flb Tmb Fbx Fby Tb Fefxa Fefya Fefxb Fefyb real
syms mb Ib mf ks bs Ilm blm Iam bam n g real
syms xb dxb yb dyb thb dthb leqa dleqa la dla thoa dthoa leqb dleqb lb dlb thob dthob real
syms ldirxa ldirya ldirxb ldiryb real

% Leg direction unit vectors
ldira = [ldirxa; ldirya];
ldirb = [ldirxb; ldiryb];
thdirxa = -ldirya;
thdirya = ldirxa;
thdirxb = -ldiryb;
thdiryb = ldirxb;
thdira = [thdirxa; thdirya];
thdirb = [thdirxb; thdiryb];

% Gearbox constraints
Tint2a = n*Tint1a;
Tint2b = n*Tint1b;
dthma = n*dthoa;
dthmb = n*dthob;
ddthma = n*ddthoa;
ddthmb = n*ddthob;

% Absolute angles
dthoaabs = dthb + dthoa;
dthobabs = dthb + dthob;
ddthoaabs = ddthb + ddthoa;
ddthobabs = ddthb + ddthob;
ddthmaabs = ddthb + ddthma;
ddthmbabs = ddthb + ddthmb;

% Spring force magnitude (compression positive)
Fsma = ks*(leqa - la) + bs*(dleqa - dla);
Fsmb = ks*(leqb - lb) + bs*(dleqb - dlb);

% Angle torque force magnitude
Ftma = Tint2a/la;
Ftmb = Tint2b/lb;

% Foot forces
Fefa = [Fefxa; Fefya];
Fefb = [Fefxb; Fefyb];
Fsa = ldira*Fsma;
Fsb = ldirb*Fsmb;
Fta = thdira*Ftma;
Ftb = thdirb*Ftmb;
Ffg = [0; -g*mf];
Ffanet = Fefa + Fsa + Fta + Ffg;
Ffbnet = Fefb + Fsb + Ftb + Ffg;

% Body forces
Fb = [Fbx; Fby];
Fbg = [0; -g*mb];
Fbnet = Fb - Fsa - Fsb - Fta - Ftb + Fbg;

% Foot kinematics
ddb = [ddbx; ddby];
ddfa = ddb + (ddla - la*dthoaabs^2)*ldira + (2*dla*dthoaabs + la*ddthoaabs)*thdira;
ddfb = ddb + (ddlb - lb*dthobabs^2)*ldirb + (2*dlb*dthobabs + lb*ddthobabs)*thdirb;

% Equilibirum length forces
Fleqa = Fla - blm*dleqa - Fsma;
Fleqb = Flb - blm*dleqb - Fsmb;

% Motor airgap net torque
Tmanet = Tma - bam*dthma;
Tmbnet = Tmb - bam*dthmb;

% Equations to be solved
eq1a = Iam*ddthmaabs - (Tmanet - Tint1a);
eq2a = mf*ddfa(1) - Ffanet(1);
eq3a = mf*ddfa(2) - Ffanet(2);
eq4a = Ilm*ddleqa - Fleqa;
eq1b = Iam*ddthmbabs - (Tmbnet - Tint1b);
eq2b = mf*ddfb(1) - Ffbnet(1);
eq3b = mf*ddfb(2) - Ffbnet(2);
eq4b = Ilm*ddleqb - Fleqb;
eq5 = Ib*ddthb - (Tb - Tmanet - Tmbnet + Tint1a + Tint1b - Tint2a - Tint2b);
eq6 = mb*ddbx - Fbnet(1);
eq7 = mb*ddby - Fbnet(2);

f = [eq1a eq2a eq3a eq4a eq1b eq2b eq3b eq4b eq5 eq6 eq7]'
v = [ddbx ddby ddthb ddleqa ddla ddthoa ddleqb ddlb ddthob Tint1a Tint1b]'
J = jacobian(f, v)
f0 = f;
for i = 1:length(v)
    f0 = subs(f0, v(i), 0);
end
f0 = simplify(f0)

if ~all(simplify(J*v + f0 - f) == 0)
    error('System of equations is not affine with respect to v');
end

%% Automatically write function
headerstr = 'function dX = bislip_eom(X, u, params)\n%% Automatically generated by generate_bislip_eom.m\n\nmb = params(1); Ib = params(2);\nmf = params(3); ks = params(4); bs = params(5);\nIlm = params(6); blm = params(7);\nIam = params(8); bam = params(9); n = params(10);\ng = params(11);\nxb = X(1); dxb = X(2); yb = X(3); dyb = X(4); thb = X(5); dthb = X(6);\nleqa = X(7); dleqa = X(8); la = X(9); dla = X(10); thoa = X(11); dthoa = X(12);\nleqb = X(13); dleqb = X(14); lb = X(15); dlb = X(16); thob = X(17); dthob = X(18);\nldirxa = sin(thb + thoa); ldirya = -cos(thb + thoa);\nldirxb = sin(thb + thob); ldiryb = -cos(thb + thob);\nFla = u(1); Tma = u(2); Flb = u(3); Tmb = u(4);\nFbx = u(5); Fby = u(6); Tb = u(7);\nFefxa = u(8); Fefya = u(9); Fefxb = u(10); Fefyb = u(11);';
Jstr = strrep(strrep(char(J), '],', '];\n    '), 'matrix(', '');
Jstr = ['J = ', Jstr(1:end-1), ';'];
f0str = strrep(strrep(char(f0), '],', '];\n     '), 'matrix(', '');
f0str = ['f0 = ', f0str(1:end-1), ';'];
endstr = 'v = J\\-f0;\ntmp = [X(2:2:end)''; v(1:9)''];\ndX = tmp(:);';
br = '\n';
filestr = [headerstr, br, br, Jstr, br, br, f0str, br, br, endstr, br];
fid = fopen('bislip_eom.m', 'w');
fprintf(fid, filestr);
fclose(fid);
